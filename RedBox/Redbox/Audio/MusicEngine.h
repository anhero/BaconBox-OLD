/**
 * @file
 * @ingroup Audio
 */
#ifndef RB_MUSIC_ENGINE_H
#define RB_MUSIC_ENGINE_H

#include <string>

#include "MusicParameters.h"
#include "AudioEngine.h"

namespace RedBox {
	class BackgroundMusic;
	struct MusicInfo;
	/**
	 * Abstract class for music engines. Audio engine implementations for musics
	 * must inherit from this class and implement the required abstract
	 * functions.
	 * @ingroup Audio
	 */
	class MusicEngine : public virtual AudioEngine {
		friend class ResourceManager;
		friend class AudioEngine;
	public:
		/**
		 * Constructs a background music. Gets the music's data associated with
		 * the key.
		 * @param key Identifier for the music data to use. The music data needs
		 * to be loaded beforehand.
		 * @param survive Used to specify if the music destroy is managed by the
		 * user or by the engine when the music is done playing. This lets the
		 * user simply call this function and play the music directly if survive
		 * is at false or keep it and re-use it if surive is at true.
		 * @return Background music generated by this function, the user will
		 * either have to destroy it manually if survive is set at true, or will
		 * be automatically destroyed once the music's state is at STOPPED. The
		 * background music returned is at the INITIAL state.
		 */
		virtual BackgroundMusic* getBackgroundMusic(const std::string& key, 
													bool survive = true) = 0;

		/**
		 * Gets the engine's global music volume.
		 * @return Engine's current global music volume level.
		 * @see RedBox::AudioEngine::musicVolume
		 */
		int getMusicVolume() const;

		/**
		 * Sets the engine's global music volume.
		 * @param newMusicVolume Engine's new global music volume level.
		 * @see RedBox::AudioEngine::musicVolume
		 */
		virtual void setMusicVolume(int newMusicVolume);

		/**
		 * Checks if the music engine is muted.
		 * @return True if the music engine is muted, false if not.
		 */
		bool isMuted() const;

		/**
		 * Mutes or unmutes the music engine.
		 * @param newMuted True to mute, false to unmute.
		 */
		void setMuted(bool newMuted);

		/**
		 * Mutes the music engine.
		 */
		void mute();

		/**
		 * Unmutes the music engine.
		 */
		void unmute();
	protected:
		/**
		 * Default constructor.
		 */
		MusicEngine();

		/**
		 * Destructor. Unloads the music engine.
		 */
		virtual ~MusicEngine();

		/**
		 * Loads music data from a file.
		 * @param filePath Path to the music file to load.
		 * @return Pointer to the music data loaded.
		 */
		virtual MusicInfo* loadMusic(const std::string& filePath) = 0;

		/**
		 * Loads music data from engine specific parameters.
		 * @param params Parameters to use to load the music data. Each engine
		 * has implementation different parameters.
		 * @return Pointer to the music data loaded.
		 */
		virtual MusicInfo* loadMusic(const MusicParameters& params) = 0;

		/**
		 * Unloads music data.
		 * @param music Music data that needs to be unloaded. Delete must not be
		 * called on it, the resource manager that calls this function takes
		 * care of that.
		 * @return True if the unloading was successful, false if not.
		 */
		virtual bool unloadMusic(MusicInfo* music) = 0;
	private:
		/// Value between 0 and 100 for the volume level. 100 is the maximum.
		int musicVolume;

		/**
		 * Value used to determine if the music engine is muted or not. When it
		 * is not muted, this attribute is set to -1. When it is muted, it
		 * contains the volume.
		 */
		int muteValue;
	};
}

#endif
